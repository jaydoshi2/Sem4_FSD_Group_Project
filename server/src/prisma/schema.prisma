datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model User {
  user_id                   String                @id @default(uuid())
  username                  String                @unique
  email                     String                @unique
  first_name                String
  last_name                 String
  password                  String
  profilePic                String?
  BirthDate                 DateTime
  createdAt                 DateTime              @default(now())
  Bio                       String
  Accuracy                  Float                 @default(0.0)
  Number_of_question_Solved Int                   @default(0)
  correct_questions         Int                   @default(0)
  points                    Int                   @default(0)
  certificate_link          String
  course_progress           UserCourseProgress[]
  chapter_progress          UserChapterProgress[]
  video_progress            UserVideoProgress[]
  videoInteractions         VideoInteraction[]
}

model Course {
  course_id           Int                   @id @default(autoincrement())
  title               String
  description         String
  thumbnail_pic_link  String
  Enrollment_Counts   Int                   @default(0)
  chapters            Chapter[]
  course_progress     UserCourseProgress[]
  UserChapterProgress UserChapterProgress[]
}

model Chapter {
  chapter_id Int                   @id @default(autoincrement())
  title      String
  courseId   Int
  course     Course                @relation(fields: [courseId], references: [course_id])
  videos     Video[]
  progress   UserChapterProgress[]
}

model Video {
  video_id      Int                 @id @default(autoincrement())
  title         String
  chapterId     Int
  videoLink     String
  chapter       Chapter             @relation(fields: [chapterId], references: [chapter_id])
  progress      UserVideoProgress[]
  likesCount    Int                 @default(0)
  dislikesCount Int                 @default(0)
  interactions  VideoInteraction[]
}

model UserCourseProgress {
  id               Int      @id @default(autoincrement())
  userId           String
  courseId         Int
  enrolledAt       DateTime @default(now())
  completed        Boolean  @default(false)
  completed_course Float    @default(0.0)
  user             User     @relation(fields: [userId], references: [user_id])
  course           Course   @relation(fields: [courseId], references: [course_id])
}

model UserChapterProgress {
  id                 Int     @id @default(autoincrement())
  userId             String
  courseId           Int
  chapterId          Int
  completed          Boolean @default(false)
  completed_chapters Float   @default(0.0)
  user               User    @relation(fields: [userId], references: [user_id])
  course             Course  @relation(fields: [courseId], references: [course_id])
  chapter            Chapter @relation(fields: [chapterId], references: [chapter_id])
}

model UserVideoProgress {
  id        Int     @id @default(autoincrement())
  userId    String
  videoId   Int
  completed Boolean @default(false)
  user      User    @relation(fields: [userId], references: [user_id])
  video     Video   @relation(fields: [videoId], references: [video_id])
}

model VideoInteraction {
  id      Int     @id @default(autoincrement())
  userId  String
  videoId Int
  liked   Boolean
  dislike Boolean
  user    User    @relation(fields: [userId], references: [user_id])
  video   Video   @relation(fields: [videoId], references: [video_id])

  @@unique([userId, videoId]) // Ensure a user can only like/dislike a video once
}
